diff --git a/src/algs/cdirect/cdirect.c b/src/algs/cdirect/cdirect.c
index d4d1cd5..b453f78 100644
--- a/src/algs/cdirect/cdirect.c
+++ b/src/algs/cdirect/cdirect.c
@@ -84,6 +84,16 @@ typedef struct {
 
 /***************************************************************************/
 
+static double euclidian_radius(int n, const double *w)
+{
+     int i;
+     double sum = 0;
+     for (i = 0; i < n; ++i)
+	  sum += w[i] * w[i];
+     /* distance from center to a vertex */
+     return sqrt(sum) * 0.5;
+}
+
 /* Evaluate the "diameter" (d) of a rectangle of widths w[n] 
 
    We round the result to single precision, which should be plenty for
@@ -95,11 +105,7 @@ static double rect_diameter(int n, const double *w, const params *p)
 {
      int i;
      if (p->which_diam == 0) { /* Jones measure */
-	  double sum = 0;
-	  for (i = 0; i < n; ++i)
-	       sum += w[i] * w[i];
-	  /* distance from center to a vertex */
-	  return ((float) (sqrt(sum) * 0.5)); 
+	  return ((float) euclidian_radius(n, w));
      }
      else { /* Gablonsky measure */
 	  double maxw = 0;
@@ -478,11 +484,14 @@ nlopt_result cdirect_unscaled(int n, nlopt_func f, void *f_data,
 			      double *x,
 			      double *minf,
 			      nlopt_stopping *stop,
+			      double lipschitz_constant,
 			      double magic_eps, int which_alg)
 {
      params p;
      int i;
      double *rnew;
+     double lower_bound = HUGE_VAL;
+     rb_node *rect_it;
      nlopt_result ret = NLOPT_OUT_OF_MEMORY;
 
      p.magic_eps = magic_eps;
@@ -532,7 +541,23 @@ nlopt_result cdirect_unscaled(int n, nlopt_func f, void *f_data,
 	  double minf0 = p.minf;
 	  ret = divide_good_rects(&p);
 	  if (ret != NLOPT_SUCCESS) goto done;
-	  if (p.minf < minf0 && nlopt_stop_f(p.stop, p.minf, minf0)) {
+
+	  if (lipschitz_constant > -0.1) { /* If lipschitz constant specified */
+	       lower_bound = HUGE_VAL;
+	       rect_it = rb_tree_min(&p.rtree);
+	       do {
+                  double current_bound  = rect_it->k[1] - lipschitz_constant *
+                      euclidian_radius(p.n, rect_it->k + 3 + p.n);
+                  if (current_bound < lower_bound) {
+                      lower_bound = current_bound;
+                  }
+	       } while ((rect_it = rb_tree_succ(rect_it)));
+
+	       if (nlopt_stop_f(p.stop, p.minf, lower_bound)) {
+                  ret = NLOPT_FTOL_REACHED;
+                  goto done;
+	       }
+	  } else if (p.minf < minf0 && nlopt_stop_f(p.stop, p.minf, minf0)) {
 	       ret = NLOPT_FTOL_REACHED;
 	       goto done;
 	  }
@@ -571,11 +596,13 @@ nlopt_result cdirect(int n, nlopt_func f, void *f_data,
                      double *x,
                      double *minf,
                      nlopt_stopping *stop,
+                     double lipschitz_constant,
                      double magic_eps, int which_alg)
 {
      cdirect_uf_data d;
      nlopt_result ret;
      const double *xtol_abs_save;
+     double max_scale = 0.0;
      int i;
 
      d.f = f; d.f_data = f_data; d.lb = lb; d.ub = ub;
@@ -587,10 +614,14 @@ nlopt_result cdirect(int n, nlopt_func f, void *f_data,
 	  d.x[n+i] = 0;
 	  d.x[2*n+i] = 1;
 	  d.x[3*n+i] = stop->xtol_abs[i] / (ub[i] - lb[i]);
+	  if (ub[i] - lb[i] > max_scale) {
+	       max_scale = ub[i] - lb[i];
+	  }
      }
      xtol_abs_save = stop->xtol_abs;
      stop->xtol_abs = d.x + 3*n;
-     ret = cdirect_unscaled(n, cdirect_uf, &d, d.x+n, d.x+2*n, x, minf, stop,
+     ret = cdirect_unscaled(n, cdirect_uf, &d, d.x+n, d.x+2*n, x,
+			    minf, stop, lipschitz_constant * max_scale,
 			    magic_eps, which_alg);
      stop->xtol_abs = xtol_abs_save;
      for (i = 0; i < n; ++i)
diff --git a/src/algs/cdirect/cdirect.h b/src/algs/cdirect/cdirect.h
index 69acb58..5235a4a 100644
--- a/src/algs/cdirect/cdirect.h
+++ b/src/algs/cdirect/cdirect.h
@@ -31,11 +31,18 @@ extern "C"
 {
 #endif /* __cplusplus */
 
+/* The accurate optimal solution is ensured when stopping by tolerance
+ * with lipschitz constant specified.
+ *
+ * lipschitz_constant = -1 is treated as no constant specified and the
+ * heuristic is used to estimate tolerance.
+ */
 extern nlopt_result cdirect_unscaled(int n, nlopt_func f, void *f_data,
 				     const double *lb, const double *ub,
 				     double *x,
 				     double *minf,
 				     nlopt_stopping *stop,
+				     double lipschitz_constant,
 				     double magic_eps, int which_alg);
 
 extern nlopt_result cdirect(int n, nlopt_func f, void *f_data,
@@ -43,6 +50,7 @@ extern nlopt_result cdirect(int n, nlopt_func f, void *f_data,
 			    double *x,
 			    double *minf,
 			    nlopt_stopping *stop,
+			    double lipschitz_constant,
 			    double magic_eps, int which_alg);
 
 extern nlopt_result cdirect_hybrid(int n, nlopt_func f, void *f_data,
diff --git a/src/api/nlopt-in.hpp b/src/api/nlopt-in.hpp
index d742c0a..3416e57 100644
--- a/src/api/nlopt-in.hpp
+++ b/src/api/nlopt-in.hpp
@@ -486,6 +486,8 @@ namespace nlopt {
       mythrow(ret);
     }
 
+    NLOPT_GETSET(double, lipschitz_constant)
+    NLOPT_GETSET(double, magic_eps)
     NLOPT_GETSET(unsigned, population)
     NLOPT_GETSET(unsigned, vector_storage)
     NLOPT_GETSET_VEC(initial_step)
diff --git a/src/api/nlopt-internal.h b/src/api/nlopt-internal.h
index bf6fecc..27041fb 100644
--- a/src/api/nlopt-internal.h
+++ b/src/api/nlopt-internal.h
@@ -69,6 +69,8 @@ extern "C" {
 
         /* algorithm-specific parameters */
         nlopt_opt local_opt;    /* local optimizer */
+        double lipschitz_constant; /* objective lipschitz constant, -1 if unset */
+        double magic_eps; /* Jones' epsilon parameter for DIRECT, -1 if unset */
         unsigned stochastic_population; /* population size for stochastic algs */
         double *dx;             /* initial step sizes (length n) for nonderivative algs */
         unsigned vector_storage;        /* max subspace dimension (0 for default) */
diff --git a/src/api/nlopt.h b/src/api/nlopt.h
index 062fd2c..d1b1aba 100644
--- a/src/api/nlopt.h
+++ b/src/api/nlopt.h
@@ -260,6 +260,12 @@ NLOPT_EXTERN(int) nlopt_get_force_stop(const nlopt_opt opt);
 
 NLOPT_EXTERN(nlopt_result) nlopt_set_local_optimizer(nlopt_opt opt, const nlopt_opt local_opt);
 
+NLOPT_EXTERN(nlopt_result) nlopt_set_lipschitz_constant(nlopt_opt opt, double lconst);
+NLOPT_EXTERN(double) nlopt_get_lipschitz_constant(const nlopt_opt opt);
+
+NLOPT_EXTERN(nlopt_result) nlopt_set_magic_eps(nlopt_opt opt, double eps);
+NLOPT_EXTERN(double) nlopt_get_magic_eps(const nlopt_opt opt);
+
 NLOPT_EXTERN(nlopt_result) nlopt_set_population(nlopt_opt opt, unsigned pop);
 NLOPT_EXTERN(unsigned) nlopt_get_population(const nlopt_opt opt);
 
diff --git a/src/api/optimize.c b/src/api/optimize.c
index c5c9446..663b9ff 100644
--- a/src/api/optimize.c
+++ b/src/api/optimize.c
@@ -440,7 +440,8 @@ static nlopt_result nlopt_optimize_(nlopt_opt opt, double *x, double *minf)
     case NLOPT_GN_DIRECT_L_RAND:
         if (!finite_domain(n, lb, ub))
             RETURN_ERR(NLOPT_INVALID_ARGS, opt, "finite domain required for global algorithm");
-        return cdirect(ni, f, f_data, lb, ub, x, minf, &stop, 0.0, (algorithm != NLOPT_GN_DIRECT) + 3 * (algorithm == NLOPT_GN_DIRECT_L_RAND ? 2 : (algorithm != NLOPT_GN_DIRECT))
+        return cdirect(ni, f, f_data, lb, ub, x, minf, &stop, opt->lipschitz_constant, opt->magic_eps > 0.0 ? opt->magic_eps : 0.0,
+                       (algorithm != NLOPT_GN_DIRECT) + 3 * (algorithm == NLOPT_GN_DIRECT_L_RAND ? 2 : (algorithm != NLOPT_GN_DIRECT))
                        + 9 * (algorithm == NLOPT_GN_DIRECT_L_RAND ? 1 : (algorithm != NLOPT_GN_DIRECT)));
 
     case NLOPT_GN_DIRECT_NOSCAL:
@@ -448,7 +449,8 @@ static nlopt_result nlopt_optimize_(nlopt_opt opt, double *x, double *minf)
     case NLOPT_GN_DIRECT_L_RAND_NOSCAL:
         if (!finite_domain(n, lb, ub))
             RETURN_ERR(NLOPT_INVALID_ARGS, opt, "finite domain required for global algorithm");
-        return cdirect_unscaled(ni, f, f_data, lb, ub, x, minf, &stop, 0.0, (algorithm != NLOPT_GN_DIRECT) + 3 * (algorithm == NLOPT_GN_DIRECT_L_RAND ? 2 : (algorithm != NLOPT_GN_DIRECT))
+        return cdirect_unscaled(ni, f, f_data, lb, ub, x, minf, &stop, opt->lipschitz_constant, opt->magic_eps > 0.0 ? opt->magic_eps : 0.0,
+                                (algorithm != NLOPT_GN_DIRECT) + 3 * (algorithm == NLOPT_GN_DIRECT_L_RAND ? 2 : (algorithm != NLOPT_GN_DIRECT))
                                 + 9 * (algorithm == NLOPT_GN_DIRECT_L_RAND ? 1 : (algorithm != NLOPT_GN_DIRECT)));
 
     case NLOPT_GN_ORIG_DIRECT:
diff --git a/src/api/options.c b/src/api/options.c
index d0a9093..7702aaa 100644
--- a/src/api/options.c
+++ b/src/api/options.c
@@ -96,6 +96,8 @@ nlopt_opt NLOPT_STDCALL nlopt_create(nlopt_algorithm algorithm, unsigned n)
         opt->force_stop_child = NULL;
 
         opt->local_opt = NULL;
+        opt->lipschitz_constant = -1;
+        opt->magic_eps = -1;
         opt->stochastic_population = 0;
         opt->vector_storage = 0;
         opt->dx = NULL;
@@ -684,8 +686,10 @@ GET(algorithm, nlopt_algorithm, algorithm)
 
 /*************************************************************************/
 
+GETSET(lipschitz_constant, double, lipschitz_constant)
+GETSET(magic_eps, double, magic_eps)
 GETSET(population, unsigned, stochastic_population)
-    GETSET(vector_storage, unsigned, vector_storage)
+GETSET(vector_storage, unsigned, vector_storage)
 
 /*************************************************************************/
 nlopt_result NLOPT_STDCALL nlopt_set_initial_step1(nlopt_opt opt, double dx)
